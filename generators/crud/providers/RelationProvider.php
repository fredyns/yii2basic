<?php

namespace app\generators\crud\providers;

use schmunk42\giiant\generators\model\Generator as ModelGenerator;
use yii\db\ActiveRecord;
use yii\db\ColumnSchema;
use yii\helpers\ArrayHelper;
use yii\helpers\Inflector;
use yii\helpers\StringHelper;

class RelationProvider extends \schmunk42\giiant\base\Provider
{
    /**
     * @var null can be null (default) or `select2`
     */
    public $inputWidget = 'select2';

    /**
     * @var bool wheter to skip non-existing columns in relation grid
     *
     * @since 0.6
     */
    public $skipVirtualAttributes = false;

    /**
     * Formatter for relation form inputs.
     *
     * Renders a drop-down list for a `hasOne`/`belongsTo` relation
     *
     * @param $attribute
     *
     * @return null|string
     */
    public function activeField($attribute)
    {
        $column = $this->generator->getColumnByAttribute($attribute);
        if (!$column) {
            return;
        }

        // TODO: NoSQL hotfix
        if (is_string($column)) {
            return null;
        }
        $relation = $this->generator->getRelationByColumn($this->generator->modelClass, $column, ['belongs_to']);
        $giiConfigs = \app\generators\giiconfig\Generator::readMetadata();
        $select2 = ArrayHelper::getValue($giiConfigs, $this->generator->getTableSchema()->fullName.'.select2.'.$column->name);

        if ($select2) {
            $pk = key($relation->link);
            $name = $this->generator->getModelNameAttribute($relation->modelClass);
            $method = __METHOD__;
            return <<<EOS

// generated by {$method}
    \$form
    ->field(\$model, '{$column->name}')
    ->widget(\kartik\select2\Select2::class, [
        'initValueText' => \yii\helpers\ArrayHelper::getValue(\$model, '{$select2['relationName']}.{$name}', \$model->{$column->name}),
        'options' => ['placeholder' => Yii::t('app', 'searching...')],
        'pluginOptions' => [
            'allowClear' => true,
            'tags' => false,
            'minimumInputLength' => 2,
            'language' => [
                'errorLoading' => new \yii\web\JsExpression('function () { return "'.{$this->generator->generateString('waiting results...')}.'"; }'),
            ],
            'ajax' => [
                'url' => \yii\helpers\Url::to(['{$select2['uri']}']),
                'dataType' => 'json',
                'data' => new \yii\web\JsExpression('function(params) { return {q:params.term}; }')
            ],
            'escapeMarkup' => new \yii\web\JsExpression('function (markup) { return markup; }'),
            'templateResult' => new \yii\web\JsExpression('function(item) { return item.text; }'),
            'templateSelection' => new \yii\web\JsExpression('function (item) { return item.text; }'),
        ],
    ])
;

EOS;
        }
    }

    /**
     * Formatter for detail view relation attributes.
     *
     * Renders a link to the related detail view
     *
     * @param $attribute ColumnSchema
     *
     * @return null|string
     */
    public function attributeFormat($attribute)
    {
        $column = $this->generator->getColumnByAttribute($attribute);
        if (!$column) {
            return;
        }

        // TODO: NoSQL hotfix
        if (is_string($column)) {
            return "'$column'";
        }

        // handle columns with a primary key, to create links in pivot tables (changed at 0.3-dev; 03.02.2015)
        // TODO double check with primary keys not named `id` of non-pivot tables
        // TODO Note: condition does not apply in every case
        if ($column->isPrimaryKey) {
            //return null; #TODO: double check with primary keys not named `id` of non-pivot tables
        }

        $relation = $this->generator->getRelationByColumn($this->generator->modelClass, $column, ['belongs_to']);
        if ($relation) {
            if ($relation->multiple) {
                return;
            }
            $title = $this->generator->getModelNameAttribute($relation->modelClass);
            $route = $this->generator->createRelationRoute($relation, 'view');

            // prepare URLs
            $routeAttach = 'create';
            $routeIndex = $this->generator->createRelationRoute($relation, 'index');

            $modelClass = $this->generator->modelClass;
            $relationProperty = lcfirst((new ModelGenerator())->generateRelationName(
                    [$relation], $modelClass::getTableSchema(), $column->name, $relation->multiple
            ));
            $relationModel = new $relation->modelClass();
            $relationModelName = StringHelper::basename($modelClass);
            $pks = $relationModel->primaryKey();
            $paramArrayItems = '';
            foreach ($pks as $attr) {
                $paramArrayItems .= "'{$attr}' => \$model->{$relationProperty}->{$attr},";
            }
            $attachArrayItems = "'{$relationModelName}'=>['{$column->name}' => \$model->{$column->name}]";

            $method = __METHOD__;
            $code = <<<EOS
        // generated by {$method}
            [
                'attribute' => '{$column->name}',
                'format' => 'html',
                'value' => ArrayHelper::getValue(\$model, '{$relationProperty}.{$title}', '<span class="label label-warning">?</span>'),
            ]
EOS;

            return $code;
        }
    }

    /**
     * Formatter for relation grid columns.
     *
     * Renders a link to the related detail view
     *
     * @param $attribute ColumnSchema
     * @param $model ActiveRecord
     *
     * @return null|string
     */
    public function columnFormat($attribute, $model)
    {
        $column = $this->generator->getColumnByAttribute($attribute, $model);
        if (!$column) {
            return;
        }

        // TODO: NoSQL hotfix
        if (is_string($column)) {
            return $column;
        }

        // handle columns with a primary key, to create links in pivot tables (changed at 0.3-dev; 03.02.2015)
        // TODO double check with primary keys not named `id` of non-pivot tables
        // TODO Note: condition does not apply in every case
        if ($column->isPrimaryKey) {
            //return null;
        }

        $relation = $this->generator->getRelationByColumn($model, $column, ['belongs_to']);
        if ($relation) {
            if ($relation->multiple) {
                return;
            }
            $title = $this->generator->getModelNameAttribute($relation->modelClass);
            $method = __METHOD__;
            $modelClass = $this->generator->modelClass;
            $relationProperty = lcfirst((new ModelGenerator())->generateRelationName(
                    [$relation], $modelClass::getTableSchema(), $column->name, $relation->multiple
            ));
            $relationModel = new $relation->modelClass();
            $pks = $relationModel->primaryKey();
            $paramArrayItems = '';

            foreach ($pks as $attr) {
                $paramArrayItems .= "'{$attr}' => \$rel->{$attr},";
            }

            $relModelClassname = get_class($model);
            $code = <<<EOS
// generated by {$method}
[
    'attribute' => '{$column->name}',
    'format' => 'html',
    'value' => function (\$model) {
        /* @var \$model \\{$relModelClassname} */
        return ArrayHelper::getValue(\$model, '{$relationProperty}.{$title}');
    },
]
EOS;

            return $code;
        }
    }

    /**
     * Renders a grid view for a given relation.
     *
     * @param $name
     * @param $relation
     * @param bool $showAllRecords
     *
     * @return mixed|string
     */
    public function relationGrid($name, $relation, $showAllRecords = false)
    {
        $model = new $relation->modelClass();

        // column counter
        $counter = 0;
        $columns = <<<EOS
            [
                'class' => 'yii\grid\SerialColumn',
            ],\n
EOS;

        if (!$this->generator->isPivotRelation($relation)) {
            // hasMany relations
            $template = '{view} {update}';
            $deleteButtonPivot = '';
        } else {
            // manyMany relations
            $template = '{view} {delete}';
            $deleteButtonPivot = <<<EOS
                    'delete' => function (\$url, \$model) {
                        return Html::a('<span class="glyphicon glyphicon-remove"></span>', \$url, [
                            'class' => 'text-danger',
                            'title' => {$this->generator->generateString('Remove')},
                            'data-confirm' => {$this->generator->generateString('Are you sure you want to delete the related item?')},
                            'data-method' => 'post',
                            'data-pjax' => '0',
                        ]);
                    },
                    'view' => function (\$url, \$model) {
                        return Html::a(
                            '<span class="glyphicon glyphicon-cog"></span>',
                            \$url,
                            [
                                'data-title' => {$this->generator->generateString('View Pivot Record')},
                                'data-toggle' => 'tooltip',
                                'data-pjax' => '0',
                                'class' => 'text-muted',
                            ]
                        );
                    },\n
EOS;
        }

        $reflection = new \ReflectionClass($relation->modelClass);
        $controller = $this->generator->pathPrefix.Inflector::camel2id($reflection->getShortName(), '-', true);
        $relKey = key($relation->link);
        $actionColumn = <<<EOS
            [
                'class' => '{$this->generator->actionButtonClass}',
                'template' => '{$template}',
                'contentOptions' => ['nowrap' => 'nowrap'],
                'urlCreator' => function (\$action, \$model, \$key, \$index) {
                    // using the column name as key, not mapping to 'id' like the standard generator
                    \$params = is_array(\$key) ? \$key : [\$model->primaryKey()[0] => (string) \$key];
                    \$params[0] = '{$controller}/'.\$action;
                    \$params['{$model->formName()}'] = ['$relKey' => \$model->primaryKey()[0]];
                    return \$params;
                },
                'buttons' => [
$deleteButtonPivot
                ],
                'controller' => '{$controller}'
            ],\n
EOS;

        // prepare grid column formatters
        $allAttributes = $model->safeAttributes();
        if (empty($allAttributes)) {
            $safeAttributes = $model->getTableSchema()->columnNames;
        }
        $skipCols = ['id', 'created_at', 'created_by', 'updated_at', 'updated_by', 'is_deleted', 'deleted_at', 'deleted_by'];
        $safeAttributes = array_diff($allAttributes, $skipCols);
        $columns .= "            /* columns: ".implode(',', $allAttributes)." */\n";
        foreach ($safeAttributes as $attr) {
            // skip virtual attributes
            if ($this->skipVirtualAttributes && !isset($model->tableSchema->columns[$attr])) {
                continue;
            }
            // don't show current model
            if (key($relation->link) == $attr) {
                continue;
            }

            $code = $this->generator->columnFormat($attr, $model);
            if ($code == false) {
                continue;
            }

            // max seven columns displayed
            if ($counter > $this->generator->gridRelationMaxColumns) {
                $columns .= "            //".str_replace("\n", "\n            //", trim($code)).",\n";
            } else {
                $columns .= "            ".str_replace("\n", "\n            ", trim($code)).",\n";
            }

            ++$counter;
        }

        // add action column
        $columns .= $actionColumn;

        $query = $showAllRecords ?
            "'query' => \\{$relation->modelClass}::find()" :
            "'query' => \$model->get{$name}()";

        if (in_array('is_deleted', $model->getTableSchema()->columnNames)) {
            $query .= "->andWhere(['is_deleted' => FALSE])";
        }

        $pageParam = Inflector::slug("page-{$name}");
        $firstPageLabel = $this->generator->generateString('First');
        $lastPageLabel = $this->generator->generateString('Last');
        $code = <<<EOS
    '<div class=\"table-responsive\">'
    .\\yii\\grid\\GridView::widget([
        'layout' => '{summary}{pager}<br/>{items}{pager}',
        'dataProvider' => new \\yii\\data\\ActiveDataProvider([
            {$query},
            'pagination' => [
                'pageSize' => 20,
                'pageParam' => '{$pageParam}',
            ]
        ]),
        'pager' => [
            'class' => yii\widgets\LinkPager::class,
            'firstPageLabel' => {$firstPageLabel},
            'lastPageLabel' => {$lastPageLabel}
        ],
        'columns' => [
{$columns}
        ],
    ])
    .'</div>'\n
EOS;

        return $code;
    }

}